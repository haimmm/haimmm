function debounce(fn, wait){
  let timeoutId;
  return function(){
    const args = arguments;  
    if(timeoutId) clearTimeout(timeoutId);
    timeoutId = setTimeout(function(){
      timeoutId = null;
      fn.apply(null, args);
    }, wait);
  }
}

function throttle(fn, wait){
  let timeoutId;
  return function(){
    const args = arguments;  
    if(timeoutId) return;
    timeoutId = setTimeout(function(){
      timeoutId = null;
      fn.apply(null, args);
    }, wait);
  }
}

const deepComapre = (obj1, obj2) => {
  if (
    typeof obj1 !== "object" ||
    typeof obj2 !== "object" ||
    obj1 === null ||
    obj2 === null
  )
    return obj1 === obj2;

  for (const key in obj1) {
    if (!deepComapre(obj1[key], obj2[key])) return false;
  }

  return Object.keys(obj1).length === Object.keys(obj2).length;
};
