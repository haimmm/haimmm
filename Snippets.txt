function debounce(fn, wait){
  let timeoutId;
  return function(){
    const args = arguments;  
    if(timeoutId) clearTimeout(timeoutId);
    timeoutId = setTimeout(function(){
      timeoutId = null;
      fn.apply(null, args);
    }, wait);
  }
}

function throttle(fn, wait){
  let timeoutId;
  return function(){
    const args = arguments;  
    if(timeoutId) return;
    timeoutId = setTimeout(function(){
      timeoutId = null;
      fn.apply(null, args);
    }, wait);
  }
}

function deepComapre(obj1, obj2){
  if (typeof obj1 === 'object' && typeof obj2 === 'object') { // object validation
    if(obj1 && obj2){ // not null validation
      if(Object.keys(obj1).length === Object.keys(obj2).length){ // props validation 
        for (const key in obj1) {
           if(!deepComapre(obj1[key], obj2[key])) return false; // recursion
        }
        return true;
      }
    }
  }
  return obj1 === obj2; // values vlaidation
};
