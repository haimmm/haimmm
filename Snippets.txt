function debounce(fn, wait){
  let timeoutId;
  return function(){
    const args = arguments;  
    if(timeoutId) clearTimeout(timeoutId);
    timeoutId = setTimeout(function(){
      timeoutId = null;
      fn.apply(null, args);
    }, wait);
  }
}

function throttle(fn, wait){
  let timeoutId;
  return function(){
    const args = arguments;  
    if(timeoutId) return;
    timeoutId = setTimeout(function(){
      timeoutId = null;
      fn.apply(null, args);
    }, wait);
  }
}

function deepComapre(obj1, obj2){
  if (typeof obj1 === 'object' && typeof obj2 === 'object') { // object validation
    if(obj1 && obj2){ // not null validation
      if(Object.keys(obj1).length === Object.keys(obj2).length){ // props validation 
        for (const key in obj1) {
           if(!deepComapre(obj1[key], obj2[key])) return false; // recursion
        }
        return true;
      }
    }
  }
  return obj1 === obj2; // values vlaidation
};

const getSafeDivision = (numerator, denominator) => {
  if (
    isNaN(numerator) ||
    isNaN(denominator) ||
    numerator === 0 ||
    denominator === 0
  )
    return 0;

  return numerator / denominator;
};

export const numberFormat = (
  param,
  minimumFractionDigits = 0,
  maximumFractionDigits = 2,
  style = "decimal" // decimal | currency | percent | unit
) => {
  const num = Number(param);

  if (isNaN(num)) {
    console.error("unexpected type of ", param);
    return param;
  }

  return num.toLocaleString("he-IL", {
    minimumFractionDigits,
    maximumFractionDigits,
    style,
    currency: "ILS",
  });
};

export const typingNumberFormat = (
  param,
  minimumFractionDigits = 0,
  maximumFractionDigits = 2
) => {
  let num,
    stringEnd = "",
    foundDot = false;

  switch (typeof param) {
    case "string":
      param = param.replace(/\D/g, (match) => {
        if (match === "." && !foundDot) {
          foundDot = true;
          return match;
        }
        return "";
      });
      if (param.endsWith(".")) stringEnd = ".";
      num = Number(param);
      break;
    case "number":
      num = param;
      break;
    default:
      console.error("unexpected type of ", param);
      return param;
  }

  const formatted = num.toLocaleString("he-IL", {
    minimumFractionDigits,
    maximumFractionDigits,
  });

  return formatted + stringEnd;
};
